# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from faro.proto import face_service_pb2 as faro_dot_proto_dot_face__service__pb2
from faro.proto import geometry_pb2 as faro_dot_proto_dot_geometry__pb2

GRPC_GENERATED_VERSION = '1.64.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in faro/proto/face_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class FaceRecognitionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.status = channel.unary_unary(
                '/FaceRecognition/status',
                request_serializer=faro_dot_proto_dot_face__service__pb2.FaceStatusRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_face__service__pb2.FaceServiceInfo.FromString,
                _registered_method=True)
        self.detect = channel.unary_unary(
                '/FaceRecognition/detect',
                request_serializer=faro_dot_proto_dot_face__service__pb2.DetectRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
                _registered_method=True)
        self.extract = channel.unary_unary(
                '/FaceRecognition/extract',
                request_serializer=faro_dot_proto_dot_face__service__pb2.ExtractRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
                _registered_method=True)
        self.score = channel.unary_unary(
                '/FaceRecognition/score',
                request_serializer=faro_dot_proto_dot_face__service__pb2.ScoreRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_geometry__pb2.Matrix.FromString,
                _registered_method=True)
        self.enroll = channel.unary_unary(
                '/FaceRecognition/enroll',
                request_serializer=faro_dot_proto_dot_face__service__pb2.EnrollRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
                _registered_method=True)
        self.search = channel.unary_unary(
                '/FaceRecognition/search',
                request_serializer=faro_dot_proto_dot_face__service__pb2.SearchRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
                _registered_method=True)
        self.detectExtract = channel.unary_unary(
                '/FaceRecognition/detectExtract',
                request_serializer=faro_dot_proto_dot_face__service__pb2.DetectExtractRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
                _registered_method=True)
        self.detectExtractEnroll = channel.unary_unary(
                '/FaceRecognition/detectExtractEnroll',
                request_serializer=faro_dot_proto_dot_face__service__pb2.DetectExtractEnrollRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
                _registered_method=True)
        self.detectExtractSearch = channel.unary_unary(
                '/FaceRecognition/detectExtractSearch',
                request_serializer=faro_dot_proto_dot_face__service__pb2.DetectExtractSearchRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
                _registered_method=True)
        self.galleryList = channel.unary_unary(
                '/FaceRecognition/galleryList',
                request_serializer=faro_dot_proto_dot_face__service__pb2.GalleryListRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_face__service__pb2.GalleryList.FromString,
                _registered_method=True)
        self.galleryDelete = channel.unary_unary(
                '/FaceRecognition/galleryDelete',
                request_serializer=faro_dot_proto_dot_face__service__pb2.GalleryDeleteRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_face__service__pb2.Empty.FromString,
                _registered_method=True)
        self.enrollmentList = channel.unary_unary(
                '/FaceRecognition/enrollmentList',
                request_serializer=faro_dot_proto_dot_face__service__pb2.EnrollmentListRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
                _registered_method=True)
        self.trainFromGallery = channel.unary_unary(
                '/FaceRecognition/trainFromGallery',
                request_serializer=faro_dot_proto_dot_face__service__pb2.EnrollmentListRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_face__service__pb2.Empty.FromString,
                _registered_method=True)
        self.subjectDelete = channel.unary_unary(
                '/FaceRecognition/subjectDelete',
                request_serializer=faro_dot_proto_dot_face__service__pb2.EnrollmentDeleteRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_face__service__pb2.EnrollmentDeleteResponse.FromString,
                _registered_method=True)
        self.generateMatchDistribution = channel.unary_unary(
                '/FaceRecognition/generateMatchDistribution',
                request_serializer=faro_dot_proto_dot_face__service__pb2.EnrollmentListRequest.SerializeToString,
                response_deserializer=faro_dot_proto_dot_geometry__pb2.Matrix.FromString,
                _registered_method=True)
        self.echo = channel.unary_unary(
                '/FaceRecognition/echo',
                request_serializer=faro_dot_proto_dot_geometry__pb2.Matrix.SerializeToString,
                response_deserializer=faro_dot_proto_dot_geometry__pb2.Matrix.FromString,
                _registered_method=True)


class FaceRecognitionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def status(self, request, context):
        """Service info and defaults
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def detect(self, request, context):
        """Simple operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def extract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def score(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def enroll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def detectExtract(self, request, context):
        """Combined opperations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def detectExtractEnroll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def detectExtractSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def galleryList(self, request, context):
        """Gallery Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def galleryDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def enrollmentList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def trainFromGallery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subjectDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def generateMatchDistribution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def echo(self, request, context):
        """rpc enrollmentDeleteConditional(EnrollmentDeleteRequest) returns (FaceRecordList){};
        rpc enrollmentTransfer(EnrollmentDeleteRequest) returns (FaceRecordList){};

        Test
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FaceRecognitionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'status': grpc.unary_unary_rpc_method_handler(
                    servicer.status,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.FaceStatusRequest.FromString,
                    response_serializer=faro_dot_proto_dot_face__service__pb2.FaceServiceInfo.SerializeToString,
            ),
            'detect': grpc.unary_unary_rpc_method_handler(
                    servicer.detect,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.DetectRequest.FromString,
                    response_serializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.SerializeToString,
            ),
            'extract': grpc.unary_unary_rpc_method_handler(
                    servicer.extract,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.ExtractRequest.FromString,
                    response_serializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.SerializeToString,
            ),
            'score': grpc.unary_unary_rpc_method_handler(
                    servicer.score,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.ScoreRequest.FromString,
                    response_serializer=faro_dot_proto_dot_geometry__pb2.Matrix.SerializeToString,
            ),
            'enroll': grpc.unary_unary_rpc_method_handler(
                    servicer.enroll,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.EnrollRequest.FromString,
                    response_serializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.SerializeToString,
            ),
            'search': grpc.unary_unary_rpc_method_handler(
                    servicer.search,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.SearchRequest.FromString,
                    response_serializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.SerializeToString,
            ),
            'detectExtract': grpc.unary_unary_rpc_method_handler(
                    servicer.detectExtract,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.DetectExtractRequest.FromString,
                    response_serializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.SerializeToString,
            ),
            'detectExtractEnroll': grpc.unary_unary_rpc_method_handler(
                    servicer.detectExtractEnroll,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.DetectExtractEnrollRequest.FromString,
                    response_serializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.SerializeToString,
            ),
            'detectExtractSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.detectExtractSearch,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.DetectExtractSearchRequest.FromString,
                    response_serializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.SerializeToString,
            ),
            'galleryList': grpc.unary_unary_rpc_method_handler(
                    servicer.galleryList,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.GalleryListRequest.FromString,
                    response_serializer=faro_dot_proto_dot_face__service__pb2.GalleryList.SerializeToString,
            ),
            'galleryDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.galleryDelete,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.GalleryDeleteRequest.FromString,
                    response_serializer=faro_dot_proto_dot_face__service__pb2.Empty.SerializeToString,
            ),
            'enrollmentList': grpc.unary_unary_rpc_method_handler(
                    servicer.enrollmentList,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.EnrollmentListRequest.FromString,
                    response_serializer=faro_dot_proto_dot_face__service__pb2.FaceRecordList.SerializeToString,
            ),
            'trainFromGallery': grpc.unary_unary_rpc_method_handler(
                    servicer.trainFromGallery,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.EnrollmentListRequest.FromString,
                    response_serializer=faro_dot_proto_dot_face__service__pb2.Empty.SerializeToString,
            ),
            'subjectDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.subjectDelete,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.EnrollmentDeleteRequest.FromString,
                    response_serializer=faro_dot_proto_dot_face__service__pb2.EnrollmentDeleteResponse.SerializeToString,
            ),
            'generateMatchDistribution': grpc.unary_unary_rpc_method_handler(
                    servicer.generateMatchDistribution,
                    request_deserializer=faro_dot_proto_dot_face__service__pb2.EnrollmentListRequest.FromString,
                    response_serializer=faro_dot_proto_dot_geometry__pb2.Matrix.SerializeToString,
            ),
            'echo': grpc.unary_unary_rpc_method_handler(
                    servicer.echo,
                    request_deserializer=faro_dot_proto_dot_geometry__pb2.Matrix.FromString,
                    response_serializer=faro_dot_proto_dot_geometry__pb2.Matrix.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FaceRecognition', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('FaceRecognition', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FaceRecognition(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/status',
            faro_dot_proto_dot_face__service__pb2.FaceStatusRequest.SerializeToString,
            faro_dot_proto_dot_face__service__pb2.FaceServiceInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def detect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/detect',
            faro_dot_proto_dot_face__service__pb2.DetectRequest.SerializeToString,
            faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def extract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/extract',
            faro_dot_proto_dot_face__service__pb2.ExtractRequest.SerializeToString,
            faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def score(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/score',
            faro_dot_proto_dot_face__service__pb2.ScoreRequest.SerializeToString,
            faro_dot_proto_dot_geometry__pb2.Matrix.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def enroll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/enroll',
            faro_dot_proto_dot_face__service__pb2.EnrollRequest.SerializeToString,
            faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/search',
            faro_dot_proto_dot_face__service__pb2.SearchRequest.SerializeToString,
            faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def detectExtract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/detectExtract',
            faro_dot_proto_dot_face__service__pb2.DetectExtractRequest.SerializeToString,
            faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def detectExtractEnroll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/detectExtractEnroll',
            faro_dot_proto_dot_face__service__pb2.DetectExtractEnrollRequest.SerializeToString,
            faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def detectExtractSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/detectExtractSearch',
            faro_dot_proto_dot_face__service__pb2.DetectExtractSearchRequest.SerializeToString,
            faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def galleryList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/galleryList',
            faro_dot_proto_dot_face__service__pb2.GalleryListRequest.SerializeToString,
            faro_dot_proto_dot_face__service__pb2.GalleryList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def galleryDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/galleryDelete',
            faro_dot_proto_dot_face__service__pb2.GalleryDeleteRequest.SerializeToString,
            faro_dot_proto_dot_face__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def enrollmentList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/enrollmentList',
            faro_dot_proto_dot_face__service__pb2.EnrollmentListRequest.SerializeToString,
            faro_dot_proto_dot_face__service__pb2.FaceRecordList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def trainFromGallery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/trainFromGallery',
            faro_dot_proto_dot_face__service__pb2.EnrollmentListRequest.SerializeToString,
            faro_dot_proto_dot_face__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def subjectDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/subjectDelete',
            faro_dot_proto_dot_face__service__pb2.EnrollmentDeleteRequest.SerializeToString,
            faro_dot_proto_dot_face__service__pb2.EnrollmentDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def generateMatchDistribution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/generateMatchDistribution',
            faro_dot_proto_dot_face__service__pb2.EnrollmentListRequest.SerializeToString,
            faro_dot_proto_dot_geometry__pb2.Matrix.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def echo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FaceRecognition/echo',
            faro_dot_proto_dot_geometry__pb2.Matrix.SerializeToString,
            faro_dot_proto_dot_geometry__pb2.Matrix.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
